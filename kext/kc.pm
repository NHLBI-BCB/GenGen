# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package kc;
use base qw(Exporter);
use base qw(DynaLoader);
package kcc;
bootstrap kc;
package kc;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package kc;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package kc;

*fh_stdout = *kcc::fh_stdout;
*fh_stderr = *kcc::fh_stderr;
*fh_stdin = *kcc::fh_stdin;
*kcerror = *kcc::kcerror;
*kcwarn = *kcc::kcwarn;
*C2perl_vector = *kcc::C2perl_vector;
*C2perl_vectori = *kcc::C2perl_vectori;
*perl2C_vector = *kcc::perl2C_vector;
*perl2C_vectori = *kcc::perl2C_vectori;
*C2perl_matrix = *kcc::C2perl_matrix;
*C2perl_matrixi = *kcc::C2perl_matrixi;
*perl2C_matrix = *kcc::perl2C_matrix;
*perl2C_matrixi = *kcc::perl2C_matrixi;
*print_vectori = *kcc::print_vectori;
*print_vector = *kcc::print_vector;
*print_matrixi = *kcc::print_matrixi;
*print_matrix = *kcc::print_matrix;
*matrix_new = *kcc::matrix_new;
*matrixi_new = *kcc::matrixi_new;
*matrixc_new = *kcc::matrixc_new;
*matrix_toMatrixi = *kcc::matrix_toMatrixi;
*matrixi_toMatrix = *kcc::matrixi_toMatrix;
*vector_new = *kcc::vector_new;
*vectori_new = *kcc::vectori_new;
*matrix_free = *kcc::matrix_free;
*matrixi_free = *kcc::matrixi_free;
*vector_free = *kcc::vector_free;
*vectori_free = *kcc::vectori_free;
*matrix_at = *kcc::matrix_at;
*matrixi_at = *kcc::matrixi_at;
*vector_at = *kcc::vector_at;
*vectori_at = *kcc::vectori_at;
*matrix_row = *kcc::matrix_row;
*matrixi_row = *kcc::matrixi_row;
*matrix_change = *kcc::matrix_change;
*matrixi_change = *kcc::matrixi_change;
*vector_change = *kcc::vector_change;
*vectori_change = *kcc::vectori_change;
*vector_toVectori = *kcc::vector_toVectori;
*vectori_toVector = *kcc::vectori_toVector;
*nrerror = *kcc::nrerror;
*ivector = *kcc::ivector;
*cvector = *kcc::cvector;
*dvector = *kcc::dvector;
*dmatrix = *kcc::dmatrix;
*imatrix = *kcc::imatrix;
*submatrix = *kcc::submatrix;
*convert_matrix = *kcc::convert_matrix;
*free_ivector = *kcc::free_ivector;
*free_cvector = *kcc::free_cvector;
*free_dvector = *kcc::free_dvector;
*free_dmatrix = *kcc::free_dmatrix;
*free_imatrix = *kcc::free_imatrix;
*free_subdmatrix = *kcc::free_subdmatrix;
*matrix_copy = *kcc::matrix_copy;
*matrixi_copy = *kcc::matrixi_copy;
*matrix_transpose = *kcc::matrix_transpose;
*matrixi_transpose = *kcc::matrixi_transpose;
*matrix_newSeq = *kcc::matrix_newSeq;
*matrixi_newSeq = *kcc::matrixi_newSeq;
*matrix_newRandom = *kcc::matrix_newRandom;
*matrix_newDiagonal = *kcc::matrix_newDiagonal;
*matrix_newIdentity = *kcc::matrix_newIdentity;
*matrix_newSubrow = *kcc::matrix_newSubrow;
*matrix_newSubcol = *kcc::matrix_newSubcol;
*matrix_newSubmat = *kcc::matrix_newSubmat;
*matrix_delRow = *kcc::matrix_delRow;
*matrix_delCol = *kcc::matrix_delCol;
*matrix_cat = *kcc::matrix_cat;
*matrix_paste = *kcc::matrix_paste;
*matrix_zero = *kcc::matrix_zero;
*matrix_multiply = *kcc::matrix_multiply;
*matrix_product = *kcc::matrix_product;
*matrix_product3 = *kcc::matrix_product3;
*matrix_add = *kcc::matrix_add;
*matrix_sum = *kcc::matrix_sum;
*matrix_subtract = *kcc::matrix_subtract;
*matrix_stdRow = *kcc::matrix_stdRow;
*matrix_stdCol = *kcc::matrix_stdCol;
*matrix_rowMean = *kcc::matrix_rowMean;
*matrix_colMean = *kcc::matrix_colMean;
*matrix_rowVar = *kcc::matrix_rowVar;
*matrix_colVar = *kcc::matrix_colVar;
*matrix_sortByVector = *kcc::matrix_sortByVector;
*vector_zero = *kcc::vector_zero;
*vector_copy = *kcc::vector_copy;
*vectori_copy = *kcc::vectori_copy;
*vector_innerProduct = *kcc::vector_innerProduct;
*vector_outerProduct = *kcc::vector_outerProduct;
*vector_normalize = *kcc::vector_normalize;
*vector_toMatrix = *kcc::vector_toMatrix;
*matrix_toVector = *kcc::matrix_toVector;
*matrix_corMatrix = *kcc::matrix_corMatrix;
*matrix_covMatrix = *kcc::matrix_covMatrix;
*matrix_solve = *kcc::matrix_solve;
*matrix_ludecomp = *kcc::matrix_ludecomp;
*matrix_lusubst = *kcc::matrix_lusubst;
*matrix_inverse = *kcc::matrix_inverse;
*matrix_det = *kcc::matrix_det;
*matrix_ludecomp2 = *kcc::matrix_ludecomp2;
*matrix_lusubst2 = *kcc::matrix_lusubst2;
*matrix_inverse2 = *kcc::matrix_inverse2;
*matrix_tridiag = *kcc::matrix_tridiag;
*pythag = *kcc::pythag;
*matrix_svd = *kcc::matrix_svd;
*matrix_svd2 = *kcc::matrix_svd2;
*matrix_eigen = *kcc::matrix_eigen;
*matrix_pcaCor = *kcc::matrix_pcaCor;
*matrix_pcaCov = *kcc::matrix_pcaCov;
*matrix_pcaScore = *kcc::matrix_pcaScore;
*matrix_pcaComVar = *kcc::matrix_pcaComVar;
*matrix_reg = *kcc::matrix_reg;
*matrix_regMSE = *kcc::matrix_regMSE;
*matrix_regModelStat = *kcc::matrix_regModelStat;
*matrix_regCoefStat = *kcc::matrix_regCoefStat;
*matrix_regObsStat = *kcc::matrix_regObsStat;
*test1 = *kcc::test1;
*cdf_binomial = *kcc::cdf_binomial;
*cdf_chi2 = *kcc::cdf_chi2;
*cdf_poisson = *kcc::cdf_poisson;
*cdf_poisson_inc = *kcc::cdf_poisson_inc;
*cdf_normal = *kcc::cdf_normal;
*cdf_stdnormal = *kcc::cdf_stdnormal;
*cdf_f = *kcc::cdf_f;
*cdf_t = *kcc::cdf_t;
*cdfinv_t = *kcc::cdfinv_t;
*pdf_stdnormal = *kcc::pdf_stdnormal;
*pdf_normal = *kcc::pdf_normal;
*pdf_binomial = *kcc::pdf_binomial;
*pdf_beta = *kcc::pdf_beta;
*pdf_poisson = *kcc::pdf_poisson;
*pdf_geometric = *kcc::pdf_geometric;
*pdf_hypergeometric = *kcc::pdf_hypergeometric;
*bico = *kcc::bico;
*invnormal = *kcc::invnormal;
*reg_linear = *kcc::reg_linear;
*mean = *kcc::mean;
*mean2 = *kcc::mean2;
*avevar = *kcc::avevar;
*avevar2 = *kcc::avevar2;
*averms = *kcc::averms;
*moment = *kcc::moment;
*cc = *kcc::cc;
*cov = *kcc::cov;
*bitest = *kcc::bitest;
*ttest_onesample = *kcc::ttest_onesample;
*ttest_ev = *kcc::ttest_ev;
*ttest_uev = *kcc::ttest_uev;
*ftest = *kcc::ftest;
*chi2test = *kcc::chi2test;
*chi2test_onesample = *kcc::chi2test_onesample;
*chi2test_trend_2by3table = *kcc::chi2test_trend_2by3table;
*chi2test_trend_3by2table = *kcc::chi2test_trend_3by2table;
*chi2test_2by2table = *kcc::chi2test_2by2table;
*chi2test_2by3table = *kcc::chi2test_2by3table;
*chi2test_3by2table = *kcc::chi2test_3by2table;
*kstest = *kcc::kstest;
*kstest_onesample = *kcc::kstest_onesample;
*probks = *kcc::probks;
*fisher_exact_1sided = *kcc::fisher_exact_1sided;
*fisher_exact_2sided = *kcc::fisher_exact_2sided;
*quick_sort = *kcc::quick_sort;
*gammln = *kcc::gammln;
*lnfactorial = *kcc::lnfactorial;
*factorial = *kcc::factorial;
*gammp = *kcc::gammp;
*gammq = *kcc::gammq;
*gser = *kcc::gser;
*gcf = *kcc::gcf;
*beta = *kcc::beta;
*betai = *kcc::betai;
*betacf = *kcc::betacf;
*inverff = *kcc::inverff;
*erf = *kcc::erf;
*ran = *kcc::ran;
*ran3 = *kcc::ran3;
*random_exp = *kcc::random_exp;
*random_stdnormal = *kcc::random_stdnormal;
*SNPHWE = *kcc::SNPHWE;
*fopen = *kcc::fopen;
*fclose = *kcc::fclose;
*srand = *kcc::srand;

# ------- VARIABLE STUBS --------

package kc;

1;
